<?php
/**
 * @file mtheme.module
 */
 
//--------------------------------//
// core Drupal hooks              //
//--------------------------------//

/**
 * Implementation of hook_help()
 */
function mtheme_help($path, $arg) {
  if ($path == 'admin/help#mtheme') {
    $txt = 'Features Control Panel provides a.... [FINISH HELP TEXT] '; // TODO
    $output = t($txt);
    return $output;
  }
}
 
/**
 * Implementation of hook_menu().
 */
function mtheme_menu() {
  $items['admin/build/mtheme/%/export'] = array(
    'title' => 'export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mtheme_export_selector', 3),
    'access arguments' => array('mtheme export'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/build/mtheme/css'] = array(
    'title' => t('CSS'),
    'page callback' => 'mtheme_css_page',
    'access arguments' => array('administer mtheme'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/css.inc',
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function mtheme_perm() {
  return array('mtheme export', 'administer mtheme');
}

/**
 * Implementation of hook_theme().
 */
function mtheme_theme() {
  return array(
   // 'mtheme_selector' => array(
   //   'arguments' => array('element' => NULL),
   // ),
    'mtheme_css_page' => array(
      'css' => array('css' => NULL),
    ),
  );
}

/**
 * Theme function for admin/build/mtheme/css.
 */
function theme_mtheme_css_page($css) {
  $path = drupal_get_path('module', 'mtheme') .'/mtheme.css';
  drupal_add_css($path);
  $output = "<pre><div class='mtheme-css-page'>". $css['css'] ."</div></pre>";

  return $output;  
}

/**
 * Implementation of hook_form_alter().
 * 
 * @todo subtheme module stores all these submit, validate,
 *  delete functions in subtheme_ctools_export_ui.inc. I think that's
 *  cleaner because it keeps all the functions related to the same form
 *  in one place. Move this stuff from css.inc to mtheme_ctools_export_ui.inc.
 *  Then, what's left in css.inc should probably be turned into it's own
 *  dedicated css module, for mtheme, subtheme and other modules.
 */
function mtheme_form_alter(&$form, &$form_state, $form_id) {
  // Modify forms for adding and editing mtheme objects
  if ($form_id == 'ctools_export_ui_edit_item_form' && arg(2) == 'mtheme') { 
    // admin/build/mtheme/add
    if (arg(3) == 'add' ||
      // admin/build/mtheme/list/selector_name/edit
      (arg(3) == 'list' && ( arg(5) == 'edit' || arg(5) == 'clone' ) )) {
      // Call mtheme functions after new selectors are added or saved.
      // $form['#validate'][] = 'mtheme_ctools_export_ui_edit_item_form_validate'; // @TODO validate CSS
      $form['#submit'][] = 'mtheme_ctools_export_ui_edit_item_form_submit';
    }
  // Modify forms for deleting and reverting mtheme objects
  } else if ($form_id == 'ctools_export_ui_delete_confirm_form' && arg(2) == 'mtheme') {
    $form['#submit'][] = 'mtheme_ctools_export_ui_delete_confirm_form_submit';
  }
}

//----------------------------------------------//
// mtheme                                       //
//----------------------------------------------//

/**
 * Add mtheme css files.
 *
 * @TODO Find out if Ctools is caching these objects. 
 *  Seems expensive to load them all each time to 
 *  check if enabled features have disabled selectors. 
 * 
 * Get all mtheme selectors
 *  
 *  $selectors
 *     |
 *     |
 *  +--------------+
 *  |              |
 * disabled    (enabled)
 *                 |
 *        +---------------+
 *        |               |
 *  in code only          |
 *                        | 
 *                   in database
 * 
 */
function mtheme_add_css() {
  // Get selectors from Ctools.
  ctools_include('export');
  $selectors = ctools_export_load_object('mtheme_selector');
  $selectors = (array) $selectors;

  $disabled = array();
  $in_code_only = array();
  $in_database = array();
  foreach ($selectors as $selector) {
    $name = $selector->name;
    if ($selector->disabled) { 
      $disabled[] = $name;
    }
    if ($selector->in_code_only) {
      $in_code_only[] = $name;  
    }
    if (!in_array($name, $in_code_only)) {
      $in_database[] = $name; 
    }
  }
     
  // Load style sheets in code (features modules).
  $features = features_get_features();
  foreach ($features as $feature) {
    // Make sure the feature module is enabled and has mtheme selectors.
    $mtheme_selectors = $feature->info['features']['mtheme_selector']; // @todo Devel backtrace shows an error here. Not sure what's causing the error.
    if ($mtheme_selectors && $feature->status == 1) {
      $module_name = $feature->name;
      // Check each selector.
      foreach ($mtheme_selectors as $name) {
        if (!in_array($name, $disabled) && in_array($name, $in_code_only)) {
          $path = drupal_get_path('module', $module_name);
          $stylesheet = $path ."/mtheme/$name/$name.css";     // @todo maybe we don't 
          drupal_add_css($stylesheet, 'theme', 'all', TRUE);  //  need stylesheets in 
        }                                                     //  .info files anymore?
      } 
    }
  }

  // Load style sheets from files directory (in CSS in database)
  foreach ($in_database as $name) {
    if (!in_array($name, $disabled)) {
      $stylesheet = file_directory_path() ."/mtheme/$name/$name.css";
      drupal_add_css($stylesheet, 'theme', 'all', TRUE);
    }  
  }
  
}

/**
 * Find the path to the mtheme's images directory.
 * 
 * If no status is passed, assume we're finding out the
 * current images file location. (If the mtheme is in code only, 
 * the images directory lives in a features module. Otherwise, the 
 * images directory lives in files/mtheme/images/mtheme_name.)
 * If a status is passed, return the requested path (for an images directory
 * when in code only, or an images directory in the files directory).
 * 
 * @param $selector
 *  object, mtheme_selector object. 
 * 
 * @param $status
 *  string, 'in code only' OR 'files'
 * 
 * @return
 *  string, path/to/images/directory.
 */
function mtheme_images_path($selector, $status = FALSE) {
  $name = $selector->name;

  if (!$status && $selector->in_code_only || $status == 'in code only') {
    $feature = mtheme_get_feature($name); 
    $module_name = $feature->name;
    $module_path = drupal_get_path('module', $module_name);
    $path = $module_path ."/mtheme/$name/images";
  } else {
    $path = file_directory_path() ."/mtheme/$name/images";  
  }
  return $path;
  // */
}

/**
 * @param $name
 *  string, mtheme_selector name
 * 
 * @return $feature
 *  object, results of features_get_feature($name) for the 
 *  feature module that stores the selector requested.
 * 
 * @todo cache info about which mtheme is stored in which
 *     module so we don't have to load all these features 
 *     modules here?
 */
function mtheme_get_feature($name) {
  $features = features_get_features();
  $feature_with_mtheme = '';

  foreach ($features as $feature) {
    // Check for subthemes.
    if ($feature->info['features']['mtheme_selector']) {
      foreach ($feature->info['features']['mtheme_selector'] as $mtheme_name) {
        if ($mtheme_name == $name) {
          $feature_with_subtheme = $feature;  
        }
      }
    }
  }
  return $feature_with_subtheme;
}

/**
 * When an mtheme_selector stored in code is modified through Drupal's GUI
 * copy all the files from the mtheme's features module into the files directory,
 * otherwise relative links to background images will break when 
 * the new CSS file is written in the files/mtheme directory. Files should also
 * get copied when an mtheme_selector is cloned.
 * 
 * @param $selector
 *  object, mtheme_selector object.
 *
 * @param $paths
 *  array('from' => 'path/to/images', 'to' => 'copy/files/to/here')
 */
function mtheme_copy_files($selector, $paths) {
  $name = $selector->name;
  // Copy images.
  $images_path = $paths['from'];
  $new_images_path = $paths['to'];
  file_check_directory($new_images_path, FILE_CREATE_DIRECTORY);
  foreach (@file_scan_directory($images_path, '.*') as $file) {
    $file_path = $new_images_path ."/". $file->basename;
    file_copy($file->filename, $file_path, FILE_EXISTS_REPLACE);
  }
  // return ? // @todo Add error handling. Notify user if unsuccessful? 
              // These file functions do a pretty good job notifying 
              // administrators about errors,
              // still it seems like there should be something
              // mtheme-specific here. 
}

/**
 * @param $names
 *  array, selectors to return. return all if no name is passed.
 * 
 * @param $disabled
 *  boolean, return disabled selectors? 
 *
 * @return $selectors
 *  array of $selector objects
 */
function mtheme_get_selectors($names = NULL, $disabled = TRUE) {
  $selectors = array();
  if ($names) {
    foreach ($names as $name) {
      $selectors[] = mtheme_selector_load($name);
    } 
  } else {
    ctools_include('export');
    $selectors = ctools_export_load_object('mtheme_selector'); 
  }
  
  return $selectors;
}

/**
 * @param $selectors
 *  array, optionally save mtheme_get_groups the work of calling
 *  ctools_export_load_object.
 * 
 * @return $groups
 *  array, selectors organized by group 
 *
 * $groups[$i]['group_name'] = $group_name
 * $groups[$i]['group_title'] = $group_title; 
 * $groups[$i]['selectors'][$selector]
 */
function mtheme_get_groups($selectors = NULL) {
  ctools_include('export');
  if (!$selectors) {
    $selectors = ctools_export_load_object('mtheme_selector');
  } 
  if ($selectors) {
    // Make a unique list of groups;
    foreach($selectors as $selector) {
      $group_title = $selector->grp;
      $group = strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', $group_title));
      $list[$group] = $group_title;
    }
    // Sort group list in alphabetical order by $group_title.
    asort($list);
    // Number groups.
    $groups = array();
    $i = 0;
    foreach($list as $group => $group_title) {
      $groups[$i]['group_name'] = $group;
      $groups[$i]['group_title'] = $group_title;
      // Organize selectors by group.
      foreach($selectors as $selector) {
        if($selector->grp == $group_title) {
          $groups[$i]['selectors'][] = $selector;
        } 
      }
      // default, sort alphabetical (handle sort by weight elsewhere)
      sort($groups[$i]['selectors']);
      $i++;
    }
    
    return $groups;
  } else {
    return FALSE;
  }
}

//--------------------------------------------------/
// Ctools plugin                                    /
//--------------------------------------------------/
/**
 * Implmenentation of hook_ctools_plugin_directory.
 */
function mtheme_ctools_plugin_directory($module, $plugin) {
  if ($plugin == 'export_ui') {
    return 'plugins/'. $plugin;
  }
}

/**
* Implementation of hook_ctools_plugin_api().
*
* Tell CTools that we support the default_mymodule_presets API.
*/
function mtheme_ctools_plugin_api($owner, $api) {
  if ($owner == 'mtheme' && $api == 'default_mtheme_selector') {
    return array('version' => 1);
  }
}

//--------------------------------------------------/
// Ctools export hooks                              /
//--------------------------------------------------/

/**
 * Export a myobj and display it in a form.
 * 
 * @param $name
 *  string, unique id for object
 */
function mtheme_export_selector(&$form_state, $name) {
  ctools_include('export');
  $obj = mtheme_selector_load($name);
  drupal_set_title(check_plain($obj->description));
  $code = mtheme_selector_export($obj);
  $lines = substr_count($code, "\n");

  $form['export'] = array(
    '#title' => t('Export data'),
    '#type' => 'textarea',
    '#value' => $code,
    '#rows' => $lines,
    '#description' => t('Copy the export text and paste it into another myobj using the import function.'),
  );
  return $form;
}

/**
 * Load a single myobj.
 */
function mtheme_selector_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('mtheme_selector', 'names', array($name)); 
  if (isset($result[$name])) {
    return $result[$name];
  }
}

/**
 * Export a myobj.
 */
function mtheme_selector_export($obj, $indent = '') {
  ctools_include('export');
  $output = ctools_export_object('mtheme_selector', $obj, $indent);
  return $output;
}

/**
 * Save a single myobj.
 */
function mtheme_selector_save(&$myobj) {
    $update = (isset($myobj->sid) && is_numeric($myobj->sid)) ? array('sid') : array();
      return drupal_write_record('mtheme_selector', $myobj, $update);
}



//-------------------------------------------------/
// Features hooks                                  /
//-------------------------------------------------/

/**
 * Implementation of hook_features_export().
 *
 * Component hook.
 * 
 * Add elements to .info file.
 */
function mtheme_selector_features_export($data, &$export, $module_name) {
  // Add dependencies
  // @todo ctools and features dependencies aren't getting added
  //  to info file. I'm not sure it matters, because these are 
  //  dependencies of mtheme anyway. Just seems cleaner to include
  //  them.
  //$export['dependencies'][] = "ctools";
  //$export['dependencies'][] = "features";
  $export['dependencies'][] = "mtheme";
  // Add ctools default hook.
  $export['features']['ctools']["mtheme:default_mtheme_selector:1"] = "mtheme:default_mtheme_selector:1";
  // Add mtheme_selector objects
  foreach ($data as $component) {
    $export['features']['mtheme_selector'][$component] = $component;
    // $export['stylesheets']['all'][$component] = $component .'.css'; 
    // @todo for some reason features components need associative arrays
    // to come out right in the .info file. Stylesheet components 
    // seem to need numerical arrays.  
    //
    // @todo Stylesheets aren't actually loaded from here. Leave this out of .info files. Revisit this later.
    //$export['stylesheets']['all'][] = "mtheme/$component/$component.css"; 
  }
  return array();
}

/**
 * Implementation of hook_features_files().
 * 
 * @todo This hook is provided by a patched version of 
 * Features. See http://github.com/bhirsch/features.
 */
function mtheme_features_files($export, $module_name) {
  $add_files = array();
  if ($mtheme_selectors = $export['features']['mtheme_selector']) {
    // Get css files for each component. 
    $i = 0;
    foreach ($mtheme_selectors as $name) {
      $mtheme_path = file_directory_path() .'/mtheme/'. $name;
      // Get selector's CSS file
      //$add_files[$i]->name = $module_name .'.'. $name;
      $add_files[$i]->name = $name;
      //$add_files[$i]->basename = $module_name .'.'. $name .'.css'; 
      $add_files[$i]->basename = $name .'.css'; 
      //$add_files[$i]->filename = $mtheme_path .'/'. $name .'.css';
      $add_files[$i]->filename = $mtheme_path .'/'. $name .'.css';
      //$add_files[$i]->subdir = '';
      $add_files[$i]->subdir = 'mtheme/'. $name;
      // Check for images.
      $selector = mtheme_selector_load($name);
      $images_path = mtheme_images_path($selector);
      foreach (@file_scan_directory($images_path, '.*') as $file) {
        $i++;
        $add_files[$i]->name = $file->name;
        $add_files[$i]->basename = $file->basename;
        $add_files[$i]->filename = $file->filename;
        $add_files[$i]->subdir = 'mtheme/'. $name .'/images';
      }
      $i++;
    }
  }
  return $add_files;
}

/**
 * Implementation of hook_features_export_render().
 *
 * Component hook.
 */
/*
function mtheme_selector_features_export_render($module_name, $data, $export = NULL) {
  $render = array();

  // @todo D7 upgrade:
  // Include implementation of hook_enable to re-write CSS.
  // This will not be necessary in D7. mtheme will be able to call 
  // hook_modules_enabled() to listen for events like this. 
  $code = array();
  $code = '  mtheme_css(); // rewrite files/mtheme/mtheme.css when module is enabled'; 
  $render['enable'] = $code;

  // @todo D7 upgrade:
  // Include implementation of hook_disable to re-write CSS.
  // This will not be necessary in D7. mtheme will be able to call 
  // hook_modules_enabled() to listen for events like this. 
  $code = array();
  $code = '  mtheme_css(); // rewrite files/mtheme/mtheme.css when module is enabled'; 
  $render['disable'] = $code;

  // This writes implementation of hook_default_mtheme_selector just as features/ctools
  // would do if there were no implementation of hook_features_export render here.
  $code = array();
  $code[] = '$export = array();';
  foreach ($data as $name) {
    $selector = mtheme_selector_load($name);
    $code[] = mtheme_selector_export($selector);
    $code[] = "  \$export['{$name}'] = \$selector;";
  }
  $code[] = '  return $export;';
  $code = implode("\n", $code);
  $render['default_mtheme_selector'] = $code;

  return $render;
}

//-----------------------------------------------------//
// Move these functions below into new CSS module      //
//-----------------------------------------------------//

/**
 * Begin CSS with timestamp in comment at the top.
 */
function _mtheme_start_css() {
  $time = time();
  $date = date("F j, Y, g:i a");
  global $base_url;

  $txt = "Generated $date -- $time -- $base_url";  

  $css = '';
  $css .= "/* $txt */ \n \n";  
  
  return $css; 
}

/**
 * Write CSS comment for group of selectors.
 */
function _mtheme_group_comment($css = NULL, $group) {
  $txt = t($group['group_title']) .' ';
  $line = 80 - strlen($txt);
  for ($i = 0; $i < $line; $i++) {
    $txt .= '=';
  }

  $css .= "\n";
  $css .= '/**'. "\n";
  $css .= ' * '. $txt ."\n";
  $css .= ' */'. "\n";
  $css .= "\n";

  return $css; 
}

/**
 * Write CSS for selector.
 */
function _mtheme_write_selector_css($css = NULL, $selector) {
  // Add comment.
  $css = _mtheme_selector_comment($css, $selector); 
  // Add selector and properties. 
  $selectors = explode("\n", $selector->css_selector); // Incase there are multiple selectors, separated by commas and line breaks
  foreach ($selectors as $s) {
    $css .= '  '. $s ."\n";
  }
  $css .= "  {\n";
  $properties = explode("\n", $selector->css_properties);
  foreach($properties as $property) {
    $css .= "    $property"; // seems like $property hangs onto carriage return 
  }
  $css .= "\n  }\n\n";

  return $css; 
}

/**
 * Write CSS comment for selector.
 */
function _mtheme_selector_comment($css, $selector) {
  $txt = '';
//  $txt = t($selector->title) .' -- ';
  $txt = t($selector->title);
//  $txt .= t('unique identifier: ') . $selector->name; 
  $txt .= t(', ') . $selector->name; 

  $css .= "  /*** $txt ***/ \n";

  return $css; 
}
